Phase: isARelation
Input: Token Lookup Person Character FirstPerson IsAInd
Options: control = appelt

Rule: IsARelation1
(

(({Token.category == NN} | {Token.category == NNP} | {Token.category == NNPS} | {Token.category == NNS} | {Token.category == NP} | {Token.category == NPS} | {Token.category == VBG})+):entity1
({IsAInd}):isaind
({Token.chunk != O, Token.chunk != B-VP, Token.chunk != B-SBAR, Token.chunk != B-PP, Token.string != "like", Token.string != "as"})*
(({Token.category == NN} | {Token.category == NNS})+):entity2

):IsARelation1
-->
:IsARelation1
  {
    gate.AnnotationSet matchedEntities=(gate.AnnotationSet) bindings.get("entity1");
	ArrayList tokens = new ArrayList(matchedEntities);
	Collections.sort(tokens, new OffsetComparator());
	String text = "";
	Iterator tokIter = tokens.iterator();
	while(tokIter.hasNext())
		text += (String)((Annotation)tokIter.next()).getFeatures().get("string") + " ";
		
    gate.AnnotationSet matchedEntities2=(gate.AnnotationSet) bindings.get("entity2");
    ArrayList tokens2 = new ArrayList(matchedEntities2);
	Collections.sort(tokens2, new OffsetComparator());
	String text2 = "";
	Iterator tokIter2 = tokens2.iterator();
	while(tokIter2.hasNext())
		text2 += (String)((Annotation)tokIter2.next()).getFeatures().get("string") + " ";
		
    gate.AnnotationSet matchedAnns= (gate.AnnotationSet) bindings.get("IsARelation1");      
    gate.FeatureMap newFeatures= Factory.newFeatureMap();
    newFeatures.put("Entity1",text.trim());
    newFeatures.put("Entity2",text2.trim());
    newFeatures.put("rule","IsARelation1");
    annotations.add(matchedAnns.firstNode(),matchedAnns.lastNode(),"IsARelation", newFeatures);
  }
  
Rule: IsARelation15
(

({Person}):entity1
({IsAInd}):isaind
({Token.chunk != O, Token.chunk != B-VP, Token.chunk != B-SBAR, Token.chunk != B-PP, Token.string != "like", Token.string != "as"})*
(({Token.category == NN} | {Token.category == NNS})+):entity2

):IsARelation15
-->
:IsARelation15
  {
    gate.AnnotationSet matchedEntities=(gate.AnnotationSet) bindings.get("entity1");
	Annotation entity1=matchedEntities.iterator().next();
	
	long start = 0;
	AnnotationSet persons = inputAS.getContained(start, matchedEntities.firstNode().getOffset()).get("Person");
	
	String text = "";
	try {
		text = doc.getContent().getContent(matchedEntities.firstNode().getOffset(),matchedEntities.lastNode().getOffset()).toString();
	} catch(InvalidOffsetException e) {
		throw new GateRuntimeException(e);
	}
	
	if(persons.size() > 0)
	{
		ArrayList personsList = new ArrayList(persons);
		Collections.sort(personsList, new OffsetComparator());
		Iterator personIter = personsList.iterator();
		Annotation temp;
		while(personIter.hasNext())
		{
			temp = (Annotation) personIter.next();
			if((ArrayList<Integer>)entity1.getFeatures().get("matches") != null && (ArrayList<Integer>)temp.getFeatures().get("matches") != null)
			{
				if(((ArrayList<Integer>)entity1.getFeatures().get("matches")).containsAll(((ArrayList<Integer>)temp.getFeatures().get("matches"))) && (String) temp.getFeatures().get("gender") != null)
				{
					try{
						text = doc.getContent().getContent(temp.getStartNode().getOffset(),temp.getEndNode().getOffset()).toString();
					} catch(InvalidOffsetException e) {
					throw new GateRuntimeException(e);
					}
				}
			}
		}
	}
	
    gate.AnnotationSet matchedEntities2=(gate.AnnotationSet) bindings.get("entity2");
    ArrayList tokens2 = new ArrayList(matchedEntities2);
	Collections.sort(tokens2, new OffsetComparator());
	String text2 = "";
	Iterator tokIter2 = tokens2.iterator();
	while(tokIter2.hasNext())
		text2 += (String)((Annotation)tokIter2.next()).getFeatures().get("string") + " ";
		
    gate.AnnotationSet matchedAnns= (gate.AnnotationSet) bindings.get("IsARelation15");      
    gate.FeatureMap newFeatures= Factory.newFeatureMap();
    newFeatures.put("Entity1",text.trim());
    newFeatures.put("Entity2",text2.trim());
    newFeatures.put("rule","IsARelation15");
    annotations.add(matchedAnns.firstNode(),matchedAnns.lastNode(),"IsARelation", newFeatures);
  }
 
Rule: IsARelation2
(

(({Token.category == NN} | {Token.category == NNP} | {Token.category == NNPS} | {Token.category == NNS} | {Token.category == NP} | {Token.category == NPS} | {Token.category == VBG})+):entity1
({Token.string == ","})[0,1]
({Lookup.majorType == determiner})+
({Token.chunk != O, Token.chunk != B-VP, Token.chunk != B-SBAR, Token.chunk != B-PP, Token.string != "like", Token.string != "as"})*
(({Token.category == NN} | {Token.category == NNS})+):entity2

):IsARelation2
-->
:IsARelation2
  {
    gate.AnnotationSet matchedEntities=(gate.AnnotationSet) bindings.get("entity1");
    ArrayList tokens = new ArrayList(matchedEntities);
	Collections.sort(tokens, new OffsetComparator());
	String text = "";
	Iterator tokIter = tokens.iterator();
	while(tokIter.hasNext())
		text += (String)((Annotation)tokIter.next()).getFeatures().get("string") + " ";
		
    gate.AnnotationSet matchedEntities2=(gate.AnnotationSet) bindings.get("entity2");
    ArrayList tokens2 = new ArrayList(matchedEntities2);
	Collections.sort(tokens2, new OffsetComparator());
	String text2 = "";
	Iterator tokIter2 = tokens2.iterator();
	while(tokIter2.hasNext())
		text2 += (String)((Annotation)tokIter2.next()).getFeatures().get("string") + " ";
		
    gate.AnnotationSet matchedAnns= (gate.AnnotationSet) bindings.get("IsARelation2");      
    gate.FeatureMap newFeatures= Factory.newFeatureMap();
    newFeatures.put("Entity1",text.trim());
    newFeatures.put("Entity2",text2.trim());
    newFeatures.put("rule","IsARelation2");
    annotations.add(matchedAnns.firstNode(),matchedAnns.lastNode(),"IsARelation", newFeatures);
  }
  
Rule: IsARelation25
(

({Person}):entity1
({Token.string == ","})[0,1]
({Lookup.majorType == determiner})+
({Token.chunk != O, Token.chunk != B-VP, Token.chunk != B-SBAR, Token.chunk != B-PP, Token.string != "like", Token.string != "as"})*
(({Token.category == NN} | {Token.category == NNS})+):entity2

):IsARelation25
-->
:IsARelation25
  {
    gate.AnnotationSet matchedEntities=(gate.AnnotationSet) bindings.get("entity1");
    Annotation entity1=matchedEntities.iterator().next();
	
	long start = 0;
	AnnotationSet persons = inputAS.getContained(start, matchedEntities.firstNode().getOffset()).get("Person");
	
	String text = "";
	try {
		text = doc.getContent().getContent(matchedEntities.firstNode().getOffset(),matchedEntities.lastNode().getOffset()).toString();
	} catch(InvalidOffsetException e) {
		throw new GateRuntimeException(e);
	}
	
	if(persons.size() > 0)
	{
		ArrayList personsList = new ArrayList(persons);
		Collections.sort(personsList, new OffsetComparator());
		Iterator personIter = personsList.iterator();
		Annotation temp;
		while(personIter.hasNext())
		{
			temp = (Annotation) personIter.next();
			if((ArrayList<Integer>)entity1.getFeatures().get("matches") != null && (ArrayList<Integer>)temp.getFeatures().get("matches") != null)
			{
				if(((ArrayList<Integer>)entity1.getFeatures().get("matches")).containsAll(((ArrayList<Integer>)temp.getFeatures().get("matches"))) && (String) temp.getFeatures().get("gender") != null)
				{
					try{
						text = doc.getContent().getContent(temp.getStartNode().getOffset(),temp.getEndNode().getOffset()).toString();
					} catch(InvalidOffsetException e) {
					throw new GateRuntimeException(e);
					}
				}
			}
		}
	}
		
    gate.AnnotationSet matchedEntities2=(gate.AnnotationSet) bindings.get("entity2");
    ArrayList tokens2 = new ArrayList(matchedEntities2);
	Collections.sort(tokens2, new OffsetComparator());
	String text2 = "";
	Iterator tokIter2 = tokens2.iterator();
	while(tokIter2.hasNext())
		text2 += (String)((Annotation)tokIter2.next()).getFeatures().get("string") + " ";
		
    gate.AnnotationSet matchedAnns= (gate.AnnotationSet) bindings.get("IsARelation25");      
    gate.FeatureMap newFeatures= Factory.newFeatureMap();
    newFeatures.put("Entity1",text.trim());
    newFeatures.put("Entity2",text2.trim());
    newFeatures.put("rule","IsARelation25");
    annotations.add(matchedAnns.firstNode(),matchedAnns.lastNode(),"IsARelation", newFeatures);
  }
  
Rule: IsARelation3
(

(({Token.category == NN} | {Token.category == NNS})+):entity2
({Token.string == ","})
({Lookup.majorType == determiner})+
({Token.chunk != O, Token.chunk != B-VP, Token.chunk != B-SBAR, Token.chunk != B-PP, Token.string != "like", Token.string != "as"})*
(({Token.category == NN} | {Token.category == NNP} | {Token.category == NNPS} | {Token.category == NNS} | {Token.category == NP} | {Token.category == NPS} | {Token.category == VBG})+):entity1

):IsARelation3
-->
:IsARelation3
  {
    gate.AnnotationSet matchedEntities=(gate.AnnotationSet) bindings.get("entity1");
    ArrayList tokens = new ArrayList(matchedEntities);
	Collections.sort(tokens, new OffsetComparator());
	String text = "";
	Iterator tokIter = tokens.iterator();
	while(tokIter.hasNext())
		text += (String)((Annotation)tokIter.next()).getFeatures().get("string") + " ";
		
    gate.AnnotationSet matchedEntities2=(gate.AnnotationSet) bindings.get("entity2");
    ArrayList tokens2 = new ArrayList(matchedEntities2);
	Collections.sort(tokens2, new OffsetComparator());
	String text2 = "";
	Iterator tokIter2 = tokens2.iterator();
	while(tokIter2.hasNext())
		text2 += (String)((Annotation)tokIter2.next()).getFeatures().get("string") + " ";
		
    gate.AnnotationSet matchedAnns= (gate.AnnotationSet) bindings.get("IsARelation3");      
    gate.FeatureMap newFeatures= Factory.newFeatureMap();
    newFeatures.put("Entity1",text.trim());
    newFeatures.put("Entity2",text2.trim());
    newFeatures.put("rule","IsARelation3");
    annotations.add(matchedAnns.firstNode(),matchedAnns.lastNode(),"IsARelation", newFeatures);
  }
  
Rule: IsARelation35
(

(({Token.category == NN} | {Token.category == NNS})+):entity2
({Token.string == ","})
({Lookup.majorType == determiner})+
({Token.chunk != O, Token.chunk != B-VP, Token.chunk != B-SBAR, Token.chunk != B-PP, Token.string != "like", Token.string != "as"})*
({Person}):entity1

):IsARelation35
-->
:IsARelation35
  {
    gate.AnnotationSet matchedEntities=(gate.AnnotationSet) bindings.get("entity1");
    Annotation entity1=matchedEntities.iterator().next();
	
	long start = 0;
	AnnotationSet persons = inputAS.getContained(start, matchedEntities.firstNode().getOffset()).get("Person");
	
	String text = "";
	try {
		text = doc.getContent().getContent(matchedEntities.firstNode().getOffset(),matchedEntities.lastNode().getOffset()).toString();
	} catch(InvalidOffsetException e) {
		throw new GateRuntimeException(e);
	}
	
	if(persons.size() > 0)
	{
		ArrayList personsList = new ArrayList(persons);
		Collections.sort(personsList, new OffsetComparator());
		Iterator personIter = personsList.iterator();
		Annotation temp;
		while(personIter.hasNext())
		{
			temp = (Annotation) personIter.next();
			if((ArrayList<Integer>)entity1.getFeatures().get("matches") != null && (ArrayList<Integer>)temp.getFeatures().get("matches") != null)
			{
				if(((ArrayList<Integer>)entity1.getFeatures().get("matches")).containsAll(((ArrayList<Integer>)temp.getFeatures().get("matches"))) && (String) temp.getFeatures().get("gender") != null)
				{
					try{
						text = doc.getContent().getContent(temp.getStartNode().getOffset(),temp.getEndNode().getOffset()).toString();
					} catch(InvalidOffsetException e) {
					throw new GateRuntimeException(e);
					}
				}
			}
		}
	}
		
    gate.AnnotationSet matchedEntities2=(gate.AnnotationSet) bindings.get("entity2");
    ArrayList tokens2 = new ArrayList(matchedEntities2);
	Collections.sort(tokens2, new OffsetComparator());
	String text2 = "";
	Iterator tokIter2 = tokens2.iterator();
	while(tokIter2.hasNext())
		text2 += (String)((Annotation)tokIter2.next()).getFeatures().get("string") + " ";
		
    gate.AnnotationSet matchedAnns= (gate.AnnotationSet) bindings.get("IsARelation35");      
    gate.FeatureMap newFeatures= Factory.newFeatureMap();
    newFeatures.put("Entity1",text.trim());
    newFeatures.put("Entity2",text2.trim());
    newFeatures.put("rule","IsARelation35");
    annotations.add(matchedAnns.firstNode(),matchedAnns.lastNode(),"IsARelation", newFeatures);
  }