Phase: hasRoleRelation
Input: Token Lookup Person FirstPerson Character JobTitle
Options: control = appelt

Rule: HasRoleRelation1
(

(
	{Token.category == NNP, Person} | {Token.category == NNP, Character} |
	{Token.category == NNPS, Person} | {Token.category == NNPS, Character} |
	{Token.category == NP, Person} | {Token.category == NP, Character}
):entity1
({Token.string != ".", Token.string != ",", Token.string != "?", Token.string != "!"})*
({Token.category == NN, JobTitle} | {Token.category == NNS, JobTitle}):entity2

):HasRoleRelation1
-->
:HasRoleRelation1
  {
    gate.AnnotationSet matchedEntities=(gate.AnnotationSet) bindings.get("entity1");
    Annotation entity1=matchedEntities.iterator().next();
    gate.AnnotationSet matchedEntities2=(gate.AnnotationSet) bindings.get("entity2");
    Annotation entity2=matchedEntities2.iterator().next();
    gate.AnnotationSet matchedAnns= (gate.AnnotationSet) bindings.get("HasRoleRelation1");      
    gate.FeatureMap newFeatures= Factory.newFeatureMap();
    newFeatures.put("Entity1",entity1.getFeatures().get("string"));
    newFeatures.put("Entity2",entity2.getFeatures().get("string"));
    newFeatures.put("rule","HasRoleRelation1");
    annotations.add(matchedAnns.firstNode(),matchedAnns.lastNode(),"HasRoleRelation", newFeatures);
  }
  
Rule: HasRoleRelation15
(

({Person}):entity1
({Token.string != ".", Token.string != ",", Token.string != "?", Token.string != "!"})*
({Token.category == NN, JobTitle} | {Token.category == NNS, JobTitle}):entity2

):HasRoleRelation15
-->
:HasRoleRelation15
  {
    gate.AnnotationSet matchedEntities=(gate.AnnotationSet) bindings.get("entity1");
    Annotation entity1=matchedEntities.iterator().next();
    gate.AnnotationSet matchedEntities2=(gate.AnnotationSet) bindings.get("entity2");
    Annotation entity2=matchedEntities2.iterator().next();
    gate.AnnotationSet matchedAnns= (gate.AnnotationSet) bindings.get("HasRoleRelation15");      
    gate.FeatureMap newFeatures= Factory.newFeatureMap();
	
	long start = 0;
	AnnotationSet persons = inputAS.getContained(start, matchedEntities.firstNode().getOffset()).get("Person");
	
	String text = "";
	try {
		text = doc.getContent().getContent(matchedEntities.firstNode().getOffset(),matchedEntities.lastNode().getOffset()).toString();
	} catch(InvalidOffsetException e) {
		throw new GateRuntimeException(e);
	}
	
	if(persons.size() > 0)
	{
		ArrayList personsList = new ArrayList(persons);
		Collections.sort(personsList, new OffsetComparator());
		Iterator personIter = personsList.iterator();
		Annotation temp;
		while(personIter.hasNext())
		{
			temp = (Annotation) personIter.next();
			if((ArrayList<Integer>)entity1.getFeatures().get("matches") != null && (ArrayList<Integer>)temp.getFeatures().get("matches") != null)
			{
				if(((ArrayList<Integer>)entity1.getFeatures().get("matches")).containsAll(((ArrayList<Integer>)temp.getFeatures().get("matches"))) && (String) temp.getFeatures().get("gender") != null)
				{
					try{
						text = doc.getContent().getContent(temp.getStartNode().getOffset(),temp.getEndNode().getOffset()).toString();
					} catch(InvalidOffsetException e) {
					throw new GateRuntimeException(e);
					}
				}
			}
		}
	}
	
    newFeatures.put("Entity1",text);
    newFeatures.put("Entity2",entity2.getFeatures().get("string"));
    newFeatures.put("rule","HasRoleRelation15");
    annotations.add(matchedAnns.firstNode(),matchedAnns.lastNode(),"HasRoleRelation", newFeatures);
  }