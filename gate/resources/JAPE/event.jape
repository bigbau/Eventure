Phase: event
Input: Token GoalInd Lookup Person
Options: control = appelt

Rule: Event1
(
({Token.string != "\"", !GoalInd})
(
	({Token.category == MD})[0,1]
	({Token.category == RB})[0,1]
	(
		{Token.category == VB, Token.string != "said" , Token.string != "be", Token.string != "been", Token.string != "is", Token.string != "was", Token.string != "has", Token.string != "are", Token.string != "were", Token.string != "have", Token.string != "had", Token.string != "is", Token.string != "'s", Token.string != "'re", Token.string != "'m", Token.string != "'ve", Token.string != "'d", Token.category != MD, !GoalInd} | 
		{Token.category == VBZ, Token.string != "said" , Token.string != "be", Token.string != "been", Token.string != "is", Token.string != "was", Token.string != "has", Token.string != "are", Token.string != "were", Token.string != "have", Token.string != "had", Token.string != "is", Token.string != "'s", Token.string != "'re", Token.string != "'m", Token.string != "'ve", Token.string != "'d", Token.category != MD, !GoalInd} | 
		{Token.category == VBD, Token.string != "said" , Token.string != "be", Token.string != "been", Token.string != "is", Token.string != "was", Token.string != "has", Token.string != "are", Token.string != "were", Token.string != "have", Token.string != "had", Token.string != "is", Token.string != "'s", Token.category != MD, Token.string != "'re", Token.string != "'m", Token.string != "'ve", Token.string != "'d", !GoalInd} |
		{Token.category == VBG, Token.string != "said" , Token.string != "be", Token.string != "been", Token.string != "is", Token.string != "was", Token.string != "has", Token.string != "are", Token.string != "were", Token.string != "have", Token.string != "had", Token.string != "is", Token.string != "'s", Token.category != MD, Token.string != "'re", Token.string != "'m", Token.string != "'ve", Token.string != "'d", !GoalInd} |
		{Token.category == VBP, Token.string != "said" , Token.string != "be", Token.string != "been", Token.string != "is", Token.string != "was", Token.string != "has", Token.string != "are", Token.string != "were", Token.string != "have", Token.string != "had", Token.string != "is", Token.string != "'s", Token.category != MD, Token.string != "'re", Token.string != "'m", Token.string != "'ve", Token.string != "'d", !GoalInd} |
		{Token.category == VBN, Token.string != "said" , Token.string != "be", Token.string != "been", Token.string != "is", Token.string != "was", Token.string != "has", Token.string != "are", Token.string != "were", Token.string != "have", Token.string != "had", Token.string != "is", Token.string != "'s", Token.category != MD, Token.string != "'re", Token.string != "'m", Token.string != "'ve", Token.string != "'d", !GoalInd}
	)
	({Person}|{Token.chunk != O, Token.chunk != B-VP, Token.chunk != B-SBAR})*
): entity1
):Event1
-->
:Event1
  {
	String person = "";
	String verb = "", object = "", adjective = "", adverb = "";
    gate.AnnotationSet matchedEntities=(gate.AnnotationSet) bindings.get("entity1");	
	ArrayList words = new ArrayList(matchedEntities);
	Collections.sort(words, new OffsetComparator());
	String text = "";
	Iterator tokIter = words.iterator();
	while(tokIter.hasNext())
		text += (String)((Annotation)tokIter.next()).getFeatures().get("string") + " ";
		
		
		
    gate.AnnotationSet matchedAnns= (gate.AnnotationSet) bindings.get("entity1");      
    gate.FeatureMap newFeatures= Factory.newFeatureMap();
	
	AnnotationSet tokens = inputAS.getContained(matchedAnns.firstNode().getOffset(), matchedAnns.lastNode().getOffset()).get("Token");
	if(tokens.size() > 0)
	{
		ArrayList tokensList = new ArrayList(tokens);
		Collections.sort(tokensList, new OffsetComparator());
		Iterator lookupIter = tokensList.iterator();
		Annotation timeAnnot;
		StringBuilder adjectives = new StringBuilder();
		StringBuilder adverbs = new StringBuilder();
		StringBuilder objects = new StringBuilder();
		int noAdjectives = 0, noAdverbs = 0, noobjects = 0;
		boolean determiner = false, prepPhrase = false;
		while (lookupIter.hasNext())
		{	
			timeAnnot = (Annotation) lookupIter.next();
			
			if(verb.equals("")&&((String)timeAnnot.getFeatures().get("category")).equals("VB")|((String)timeAnnot.getFeatures().get("category")).equals("VBD")|((String)timeAnnot.getFeatures().get("category")).equals("VBG")|((String)timeAnnot.getFeatures().get("category")).equals("VBN")|((String)timeAnnot.getFeatures().get("category")).equals("VBP")|((String)timeAnnot.getFeatures().get("category")).equals("VBZ"))
			{
				try{
					verb = doc.getContent().getContent(timeAnnot.getStartNode().getOffset(),timeAnnot.getEndNode().getOffset()).toString();
				} catch(InvalidOffsetException e) {
					throw new GateRuntimeException(e);
				}
			}
			if(((String)timeAnnot.getFeatures().get("category")).equals("DT")){
				determiner = true;
			}
			
			if(((String)timeAnnot.getFeatures().get("chunk")).equals("B-PP")){
				prepPhrase = true;
			}
			
			if(((String)timeAnnot.getFeatures().get("category")).equals("NN")|
			((String)timeAnnot.getFeatures().get("category")).equals("NNS")|
			((String)timeAnnot.getFeatures().get("category")).equals("NNP")|
			((String)timeAnnot.getFeatures().get("category")).equals("NNPS")|
			((String)timeAnnot.getFeatures().get("category")).equals("PRP")|
			((String)timeAnnot.getFeatures().get("category")).equals("PRP$")
			)
			{
				if(!prepPhrase){
					if(determiner){
						try{					
								if(noobjects>0){
									objects.append("; "+ doc.getContent().getContent(timeAnnot.getStartNode().getOffset(),timeAnnot.getEndNode().getOffset()).toString());
								}else{
									objects.append( doc.getContent().getContent(timeAnnot.getStartNode().getOffset(),timeAnnot.getEndNode().getOffset()).toString());
									noobjects++;
								}
						} catch(InvalidOffsetException e) {
							throw new GateRuntimeException(e);
						}
						determiner = false;
					}else{
						if(((String)timeAnnot.getFeatures().get("chunk")).equals("B-NP")|((String)timeAnnot.getFeatures().get("chunk")).equals("I-NP")){
							try{					
								if(noobjects>0){
									objects.append("; "+ doc.getContent().getContent(timeAnnot.getStartNode().getOffset(),timeAnnot.getEndNode().getOffset()).toString());
								}else{
									objects.append( doc.getContent().getContent(timeAnnot.getStartNode().getOffset(),timeAnnot.getEndNode().getOffset()).toString());
									noobjects++;
								}					
							} catch(InvalidOffsetException e) {
								throw new GateRuntimeException(e);
							}						
						}
					}
					prepPhrase = false;
				}
			}
			
			if(((String)timeAnnot.getFeatures().get("category")).equals("JJ")|((String)timeAnnot.getFeatures().get("category")).equals("JJR")|((String)timeAnnot.getFeatures().get("category")).equals("JJS"))
			{
				try{
				 if(noAdjectives>0){
					adjectives.append("; "+ doc.getContent().getContent(timeAnnot.getStartNode().getOffset(),timeAnnot.getEndNode().getOffset()).toString());
				}else{
					adjectives.append( doc.getContent().getContent(timeAnnot.getStartNode().getOffset(),timeAnnot.getEndNode().getOffset()).toString());
					noAdjectives++;
				}
				} catch(InvalidOffsetException e) {
					throw new GateRuntimeException(e);
				}
			}
			
			if(((String)timeAnnot.getFeatures().get("chunk")).equals("I-ADVB")|((String)timeAnnot.getFeatures().get("chunk")).equals("B-ADVB")|((String)timeAnnot.getFeatures().get("category")).equals("RB"))
			{
				try{
				 if(noAdverbs>0){
					adverbs.append("; "+ doc.getContent().getContent(timeAnnot.getStartNode().getOffset(),timeAnnot.getEndNode().getOffset()).toString());
				}else{
					adverbs.append( doc.getContent().getContent(timeAnnot.getStartNode().getOffset(),timeAnnot.getEndNode().getOffset()).toString());
					noAdverbs++;
				}
				} catch(InvalidOffsetException e) {
					throw new GateRuntimeException(e);
				}
			}
		}
		object = objects.toString();
		adjective = adjectives.toString();
		adverb = adverbs.toString();
		
	}
	AnnotationSet persons = inputAS.getContained(matchedAnns.firstNode().getOffset(), matchedAnns.lastNode().getOffset()).get("Person");
	if(persons.size() > 0)
	{
		ArrayList personsList = new ArrayList(persons);
		Collections.sort(personsList, new OffsetComparator());
		Iterator personsIter = personsList.iterator();
		if(personsIter.hasNext())
		{
			Annotation timeAnnot = (Annotation) personsIter.next();
			
			try{
				person = doc.getContent().getContent(timeAnnot.getStartNode().getOffset(),timeAnnot.getEndNode().getOffset()).toString();
			} catch(InvalidOffsetException e) {
				throw new GateRuntimeException(e);
			}
		}
	}
	
	newFeatures.put("Person", person);
    newFeatures.put("Entity1",text);
	newFeatures.put("Verb",verb);
	newFeatures.put("Objects",object);
	newFeatures.put("Adjectives",adjective);
	newFeatures.put("Adverbs",adverb);
    newFeatures.put("rule","Event1");
    annotations.add(matchedAnns.firstNode(),matchedAnns.lastNode(),"Event", newFeatures);
  }