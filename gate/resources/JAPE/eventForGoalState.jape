Phase: eventForGoalState
Input: Token Lookup MotivationInd GoalState Event
Options: control = appelt

Rule: EventForGoalState1
(
	({GoalState}):state
	({Token.string != ".", Token.string != ",", Token.string != "?", Token.string != "!", !Event})*
	({Token.chunk == O})[1]
	({Token.string != ".", Token.string != ",", Token.string != "?", Token.string != "!", !Event})*
	({Event}):event
):EventForGoalState1
-->
:EventForGoalState1
  {
  
	String goalStateObject = "", goalStateObjectAdjective = "", goalStateAdverb = "", eventVerb = "", eventObject = "", eventObjectAdjective = "", eventAdverb = "";
    gate.AnnotationSet matchedGoal=(gate.AnnotationSet) bindings.get("state");
    Annotation state=matchedGoal.iterator().next();
	gate.AnnotationSet matchedEvent=(gate.AnnotationSet) bindings.get("event");
    Annotation event=matchedEvent.iterator().next();
    gate.AnnotationSet matchedAnns= (gate.AnnotationSet) bindings.get("EventForGoalState1");      
    gate.FeatureMap newFeatures= Factory.newFeatureMap();
	
	
	AnnotationSet tokens = inputAS.getContained(matchedGoal.firstNode().getOffset(), matchedGoal.lastNode().getOffset()).get("Token");
	if(tokens.size() > 0)
	{
		ArrayList tokensList = new ArrayList(tokens);
		Collections.sort(tokensList, new OffsetComparator());
		Iterator lookupIter = tokensList.iterator();
		Annotation timeAnnot;
		StringBuilder adjectives = new StringBuilder();
		StringBuilder adverbs = new StringBuilder();
		int noAdjectives = 0, noAdverbs = 0;
		boolean determiner = false, prepPhrase = false;
		while(lookupIter.hasNext())
		{	
			timeAnnot = (Annotation) lookupIter.next();
			
			
			if(((String)timeAnnot.getFeatures().get("category")).equals("DT")){
				determiner = true;
			}
			
			if(((String)timeAnnot.getFeatures().get("chunk")).equals("B-PP")){
				prepPhrase = true;
			}
			
			if(((String)timeAnnot.getFeatures().get("category")).equals("NN")|((String)timeAnnot.getFeatures().get("category")).equals("NNS")|((String)timeAnnot.getFeatures().get("category")).equals("NNP")|((String)timeAnnot.getFeatures().get("category")).equals("NNPS"))
			{
				if(!prepPhrase){
					if(determiner){
						try{
							goalStateObject = doc.getContent().getContent(timeAnnot.getStartNode().getOffset(),timeAnnot.getEndNode().getOffset()).toString();
						} catch(InvalidOffsetException e) {
							throw new GateRuntimeException(e);
						}
						determiner = false;
					}else{
						if(((String)timeAnnot.getFeatures().get("chunk")).equals("B-NP")|((String)timeAnnot.getFeatures().get("chunk")).equals("I-NP")){
							try{
								goalStateObject = doc.getContent().getContent(timeAnnot.getStartNode().getOffset(),timeAnnot.getEndNode().getOffset()).toString();
							} catch(InvalidOffsetException e) {
								throw new GateRuntimeException(e);
							}						
						}
					}
					prepPhrase = false;
				}
			}
			
			if(((String)timeAnnot.getFeatures().get("category")).equals("JJ")|((String)timeAnnot.getFeatures().get("category")).equals("JJR")|((String)timeAnnot.getFeatures().get("category")).equals("JJS"))
			{
				try{
				 if(noAdjectives>0){
					adjectives.append("; "+ doc.getContent().getContent(timeAnnot.getStartNode().getOffset(),timeAnnot.getEndNode().getOffset()).toString());
				}else{
					adjectives.append( doc.getContent().getContent(timeAnnot.getStartNode().getOffset(),timeAnnot.getEndNode().getOffset()).toString());
					noAdjectives++;
				}
				} catch(InvalidOffsetException e) {
					throw new GateRuntimeException(e);
				}
			}
			
			if(((String)timeAnnot.getFeatures().get("chunk")).equals("I-ADVB"))
			{
				try{
				 if(noAdverbs>0){
					adverbs.append("; "+ doc.getContent().getContent(timeAnnot.getStartNode().getOffset(),timeAnnot.getEndNode().getOffset()).toString());
				}else{
					adverbs.append( doc.getContent().getContent(timeAnnot.getStartNode().getOffset(),timeAnnot.getEndNode().getOffset()).toString());
					noAdverbs++;
				}
				} catch(InvalidOffsetException e) {
					throw new GateRuntimeException(e);
				}
			}
		}
		goalStateObjectAdjective = adjectives.toString();
		goalStateAdverb = adverbs.toString();
	}
	
	tokens = inputAS.getContained(matchedEvent.firstNode().getOffset(), matchedEvent.lastNode().getOffset()).get("Token");
	if(tokens.size() > 0)
	{
		ArrayList tokensList = new ArrayList(tokens);
		Collections.sort(tokensList, new OffsetComparator());
		Iterator lookupIter = tokensList.iterator();
		Annotation timeAnnot;
		StringBuilder adjectives = new StringBuilder();
		StringBuilder adverbs = new StringBuilder();
		int noAdjectives = 0, noAdverbs = 0;
		boolean determiner = false, prepPhrase = false;
		while(lookupIter.hasNext())
		{	
			timeAnnot = (Annotation) lookupIter.next();
			
			if(((String)timeAnnot.getFeatures().get("category")).equals("VB")|((String)timeAnnot.getFeatures().get("category")).equals("VBD")|((String)timeAnnot.getFeatures().get("category")).equals("VBG")|((String)timeAnnot.getFeatures().get("category")).equals("VBN")|((String)timeAnnot.getFeatures().get("category")).equals("VBP")|((String)timeAnnot.getFeatures().get("category")).equals("VBZ"))
			{
				try{
					eventVerb = doc.getContent().getContent(timeAnnot.getStartNode().getOffset(),timeAnnot.getEndNode().getOffset()).toString();
				} catch(InvalidOffsetException e) {
					throw new GateRuntimeException(e);
				}
			}
			if(((String)timeAnnot.getFeatures().get("category")).equals("DT")){
				determiner = true;
			}
			
			if(((String)timeAnnot.getFeatures().get("chunk")).equals("B-PP")){
				prepPhrase = true;
			}
			
			if(((String)timeAnnot.getFeatures().get("category")).equals("NN")|((String)timeAnnot.getFeatures().get("category")).equals("NNS")|((String)timeAnnot.getFeatures().get("category")).equals("NNP")|((String)timeAnnot.getFeatures().get("category")).equals("NNPS"))
			{
				if(!prepPhrase){
					if(determiner){
						try{
							eventObject = doc.getContent().getContent(timeAnnot.getStartNode().getOffset(),timeAnnot.getEndNode().getOffset()).toString();
						} catch(InvalidOffsetException e) {
							throw new GateRuntimeException(e);
						}
						determiner = false;
					}else{
						if(((String)timeAnnot.getFeatures().get("chunk")).equals("B-NP")|((String)timeAnnot.getFeatures().get("chunk")).equals("I-NP")){
							try{
								eventObject = doc.getContent().getContent(timeAnnot.getStartNode().getOffset(),timeAnnot.getEndNode().getOffset()).toString();
							} catch(InvalidOffsetException e) {
								throw new GateRuntimeException(e);
							}						
						}
					}
					prepPhrase = false;
				}
			}
			
			if(((String)timeAnnot.getFeatures().get("category")).equals("JJ")|((String)timeAnnot.getFeatures().get("category")).equals("JJR")|((String)timeAnnot.getFeatures().get("category")).equals("JJS"))
			{
				try{
				 if(noAdjectives>0){
					adjectives.append("; "+ doc.getContent().getContent(timeAnnot.getStartNode().getOffset(),timeAnnot.getEndNode().getOffset()).toString());
				}else{
					adjectives.append( doc.getContent().getContent(timeAnnot.getStartNode().getOffset(),timeAnnot.getEndNode().getOffset()).toString());
					noAdjectives++;
				}
				} catch(InvalidOffsetException e) {
					throw new GateRuntimeException(e);
				}
			}
			
			if(((String)timeAnnot.getFeatures().get("chunk")).equals("I-ADVB"))
			{
				try{
				 if(noAdverbs>0){
					adverbs.append("; "+ doc.getContent().getContent(timeAnnot.getStartNode().getOffset(),timeAnnot.getEndNode().getOffset()).toString());
				}else{
					adverbs.append( doc.getContent().getContent(timeAnnot.getStartNode().getOffset(),timeAnnot.getEndNode().getOffset()).toString());
					noAdverbs++;
				}
				} catch(InvalidOffsetException e) {
					throw new GateRuntimeException(e);
				}
			}
		}
		eventObjectAdjective = adjectives.toString();
		eventAdverb = adverbs.toString();
		
	}
	
	
	newFeatures.put("GoalState",state.getFeatures().get("Entity1"));
	newFeatures.put("GoalStateObject",goalStateObject);
	newFeatures.put("GoalStateObjectAdjectives",goalStateObjectAdjective);
	newFeatures.put("GoalStateAdverb",goalStateAdverb);
	newFeatures.put("Event",event.getFeatures().get("Entity1"));
	newFeatures.put("EventVerb",eventVerb);
	newFeatures.put("EventObject",eventObject);
	newFeatures.put("EventObjectAdjectives",eventObjectAdjective);
	newFeatures.put("EventAdverb",eventAdverb);
    newFeatures.put("rule","EventForGoalState1");
    annotations.add(matchedAnns.firstNode(),matchedAnns.lastNode(),"EventForGoalState", newFeatures);
  }
  
Rule: EventForGoalState2
(
	({Event}):event
	({Token.string != ".", Token.string != ",", Token.string != "?", Token.string != "!", !GoalState})*
	({MotivationInd})[0,1]
	({Token.string != ".", Token.string != ",", Token.string != "?", Token.string != "!", !GoalState})*
	({GoalState}):state
):EventForGoalState2
-->
:EventForGoalState2
  {
  
	String goalStateObject = "", goalStateObjectAdjective = "", goalStateAdverb = "", eventVerb = "", eventObject = "", eventObjectAdjective = "", eventAdverb = "";
    gate.AnnotationSet matchedGoal=(gate.AnnotationSet) bindings.get("state");
    Annotation state=matchedGoal.iterator().next();
	gate.AnnotationSet matchedEvent=(gate.AnnotationSet) bindings.get("event");
    Annotation event=matchedEvent.iterator().next();
    gate.AnnotationSet matchedAnns= (gate.AnnotationSet) bindings.get("EventForGoalState2");      
    gate.FeatureMap newFeatures= Factory.newFeatureMap();
	
	
	AnnotationSet tokens = inputAS.getContained(matchedGoal.firstNode().getOffset(), matchedGoal.lastNode().getOffset()).get("Token");
	if(tokens.size() > 0)
	{
		ArrayList tokensList = new ArrayList(tokens);
		Collections.sort(tokensList, new OffsetComparator());
		Iterator lookupIter = tokensList.iterator();
		Annotation timeAnnot;
		StringBuilder adjectives = new StringBuilder();
		StringBuilder adverbs = new StringBuilder();
		int noAdjectives = 0, noAdverbs = 0;
		boolean determiner = false, prepPhrase = false;
		while(lookupIter.hasNext())
		{	
			timeAnnot = (Annotation) lookupIter.next();
			
			
			if(((String)timeAnnot.getFeatures().get("category")).equals("DT")){
				determiner = true;
			}
			
			if(((String)timeAnnot.getFeatures().get("chunk")).equals("B-PP")){
				prepPhrase = true;
			}
			
			if(((String)timeAnnot.getFeatures().get("category")).equals("NN")|((String)timeAnnot.getFeatures().get("category")).equals("NNS")|((String)timeAnnot.getFeatures().get("category")).equals("NNP")|((String)timeAnnot.getFeatures().get("category")).equals("NNPS"))
			{
				if(!prepPhrase){
					if(determiner){
						try{
							goalStateObject = doc.getContent().getContent(timeAnnot.getStartNode().getOffset(),timeAnnot.getEndNode().getOffset()).toString();
						} catch(InvalidOffsetException e) {
							throw new GateRuntimeException(e);
						}
						determiner = false;
					}else{
						if(((String)timeAnnot.getFeatures().get("chunk")).equals("B-NP")|((String)timeAnnot.getFeatures().get("chunk")).equals("I-NP")){
							try{
								goalStateObject = doc.getContent().getContent(timeAnnot.getStartNode().getOffset(),timeAnnot.getEndNode().getOffset()).toString();
							} catch(InvalidOffsetException e) {
								throw new GateRuntimeException(e);
							}						
						}
					}
					prepPhrase = false;
				}
			}
			
			if(((String)timeAnnot.getFeatures().get("category")).equals("JJ")|((String)timeAnnot.getFeatures().get("category")).equals("JJR")|((String)timeAnnot.getFeatures().get("category")).equals("JJS"))
			{
				try{
				 if(noAdjectives>0){
					adjectives.append("; "+ doc.getContent().getContent(timeAnnot.getStartNode().getOffset(),timeAnnot.getEndNode().getOffset()).toString());
				}else{
					adjectives.append( doc.getContent().getContent(timeAnnot.getStartNode().getOffset(),timeAnnot.getEndNode().getOffset()).toString());
					noAdjectives++;
				}
				} catch(InvalidOffsetException e) {
					throw new GateRuntimeException(e);
				}
			}
			
			if(((String)timeAnnot.getFeatures().get("chunk")).equals("I-ADVB"))
			{
				try{
				 if(noAdverbs>0){
					adverbs.append("; "+ doc.getContent().getContent(timeAnnot.getStartNode().getOffset(),timeAnnot.getEndNode().getOffset()).toString());
				}else{
					adverbs.append( doc.getContent().getContent(timeAnnot.getStartNode().getOffset(),timeAnnot.getEndNode().getOffset()).toString());
					noAdverbs++;
				}
				} catch(InvalidOffsetException e) {
					throw new GateRuntimeException(e);
				}
			}
		}
		goalStateObjectAdjective = adjectives.toString();
		goalStateAdverb = adverbs.toString();
	}
	
	tokens = inputAS.getContained(matchedEvent.firstNode().getOffset(), matchedEvent.lastNode().getOffset()).get("Token");
	if(tokens.size() > 0)
	{
		ArrayList tokensList = new ArrayList(tokens);
		Collections.sort(tokensList, new OffsetComparator());
		Iterator lookupIter = tokensList.iterator();
		Annotation timeAnnot;
		StringBuilder adjectives = new StringBuilder();
		StringBuilder adverbs = new StringBuilder();
		int noAdjectives = 0, noAdverbs = 0;
		boolean determiner = false, prepPhrase = false;
		while(lookupIter.hasNext())
		{	
			timeAnnot = (Annotation) lookupIter.next();
			
			if(((String)timeAnnot.getFeatures().get("category")).equals("VB")|((String)timeAnnot.getFeatures().get("category")).equals("VBD")|((String)timeAnnot.getFeatures().get("category")).equals("VBG")|((String)timeAnnot.getFeatures().get("category")).equals("VBN")|((String)timeAnnot.getFeatures().get("category")).equals("VBP")|((String)timeAnnot.getFeatures().get("category")).equals("VBZ"))
			{
				try{
					eventVerb = doc.getContent().getContent(timeAnnot.getStartNode().getOffset(),timeAnnot.getEndNode().getOffset()).toString();
				} catch(InvalidOffsetException e) {
					throw new GateRuntimeException(e);
				}
			}
			if(((String)timeAnnot.getFeatures().get("category")).equals("DT")){
				determiner = true;
			}
			
			if(((String)timeAnnot.getFeatures().get("chunk")).equals("B-PP")){
				prepPhrase = true;
			}
			
			if(((String)timeAnnot.getFeatures().get("category")).equals("NN")|((String)timeAnnot.getFeatures().get("category")).equals("NNS")|((String)timeAnnot.getFeatures().get("category")).equals("NNP")|((String)timeAnnot.getFeatures().get("category")).equals("NNPS"))
			{
				if(!prepPhrase){
					if(determiner){
						try{
							eventObject = doc.getContent().getContent(timeAnnot.getStartNode().getOffset(),timeAnnot.getEndNode().getOffset()).toString();
						} catch(InvalidOffsetException e) {
							throw new GateRuntimeException(e);
						}
						determiner = false;
					}else{
						if(((String)timeAnnot.getFeatures().get("chunk")).equals("B-NP")|((String)timeAnnot.getFeatures().get("chunk")).equals("I-NP")){
							try{
								eventObject = doc.getContent().getContent(timeAnnot.getStartNode().getOffset(),timeAnnot.getEndNode().getOffset()).toString();
							} catch(InvalidOffsetException e) {
								throw new GateRuntimeException(e);
							}						
						}
					}
					prepPhrase = false;
				}
			}
			
			if(((String)timeAnnot.getFeatures().get("category")).equals("JJ")|((String)timeAnnot.getFeatures().get("category")).equals("JJR")|((String)timeAnnot.getFeatures().get("category")).equals("JJS"))
			{
				try{
				 if(noAdjectives>0){
					adjectives.append("; "+ doc.getContent().getContent(timeAnnot.getStartNode().getOffset(),timeAnnot.getEndNode().getOffset()).toString());
				}else{
					adjectives.append( doc.getContent().getContent(timeAnnot.getStartNode().getOffset(),timeAnnot.getEndNode().getOffset()).toString());
					noAdjectives++;
				}
				} catch(InvalidOffsetException e) {
					throw new GateRuntimeException(e);
				}
			}
			
			if(((String)timeAnnot.getFeatures().get("chunk")).equals("I-ADVB"))
			{
				try{
				 if(noAdverbs>0){
					adverbs.append("; "+ doc.getContent().getContent(timeAnnot.getStartNode().getOffset(),timeAnnot.getEndNode().getOffset()).toString());
				}else{
					adverbs.append( doc.getContent().getContent(timeAnnot.getStartNode().getOffset(),timeAnnot.getEndNode().getOffset()).toString());
					noAdverbs++;
				}
				} catch(InvalidOffsetException e) {
					throw new GateRuntimeException(e);
				}
			}
		}
		eventObjectAdjective = adjectives.toString();
		eventAdverb = adverbs.toString();
		
	}
	
	
	newFeatures.put("GoalState",state.getFeatures().get("Entity1"));
	newFeatures.put("GoalStateObject",goalStateObject);
	newFeatures.put("GoalStateObjectAdjectives",goalStateObjectAdjective);
	newFeatures.put("GoalStateAdverb",goalStateAdverb);
	newFeatures.put("Event",event.getFeatures().get("Entity1"));
	newFeatures.put("EventVerb",eventVerb);
	newFeatures.put("EventObject",eventObject);
	newFeatures.put("EventObjectAdjectives",eventObjectAdjective);
	newFeatures.put("EventAdverb",eventAdverb);
    newFeatures.put("rule","EventForGoalState2");
    annotations.add(matchedAnns.firstNode(),matchedAnns.lastNode(),"EventForGoalState", newFeatures);
  }