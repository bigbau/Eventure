Phase: happens
Input: Token Lookup Cause EffectState Event GoalInd GoalEvent Person
Options: control = all

Rule: Happens1
(
	({Lookup.majorType==timeHappened_key}):timeHappened
	({Token.chunk != O})*
	({Token.string == ","})
	({Token.string != ".", Token.string != "?", Token.string != "!", !Event, !GoalEvent})*
	({Event}):event
):Happens1
-->
:Happens1
  {
    gate.AnnotationSet matchedEntity=(gate.AnnotationSet) bindings.get("event");
	Annotation entity=matchedEntity.iterator().next();
	gate.AnnotationSet matchedEntity2=(gate.AnnotationSet) bindings.get("timeHappened");
    Annotation entity2=matchedEntity2.iterator().next();
    gate.AnnotationSet matchedAnns= (gate.AnnotationSet) bindings.get("Happens1");      
    gate.FeatureMap newFeatures= Factory.newFeatureMap();
	
	String temp = "", timeHappened = "";
	try {
		temp = doc.getContent().getContent(matchedEntity2.firstNode().getOffset(),matchedEntity2.lastNode().getOffset()).toString();
	} catch(InvalidOffsetException e) {
		throw new GateRuntimeHappenedException(e);
	}
	AnnotationSet lookups = inputAS.getContained(matchedEntity2.firstNode().getOffset(), matchedEntity2.lastNode().getOffset()).get("Lookup");
	if(lookups.size() > 0)
	{
		ArrayList lookupsList = new ArrayList(lookups);
		Collections.sort(lookupsList, new OffsetComparator());
		Iterator lookupIter = lookupsList.iterator();
		Annotation timeHappenedAnnot;
		while(lookupIter.hasNext())
		{
			timeHappenedAnnot = (Annotation) lookupIter.next();
			
			if(((String)timeHappenedAnnot.getFeatures().get("majorType")).equals("timeHappeneds")|((String)timeHappenedAnnot.getFeatures().get("majorType")).equals("date_key"))
			{
				try{
					timeHappened = doc.getContent().getContent(timeHappenedAnnot.getStartNode().getOffset(),timeHappenedAnnot.getEndNode().getOffset()).toString();
				} catch(InvalidOffsetException e) {
					throw new GateRuntimeHappenedException(e);
				}
			}
			
		}
	}
	
    newFeatures.put("Entity1",entity.getFeatures().get("Entity1"));
	newFeatures.put("Entity2",temp);
	newFeatures.put("TimeHappened",timeHappened);
    newFeatures.put("rule","Happens1");
    annotations.add(matchedEntity.firstNode(),matchedEntity.lastNode(),"HappensRelation", newFeatures);
  }
  
Rule: Happens2
(
	({Event, Event contains {Lookup.majorType==timeHappened_key}}):event
):Happens2
-->
:Happens2
  {
    gate.AnnotationSet matchedEntity=(gate.AnnotationSet) bindings.get("event");
	Annotation entity=matchedEntity.iterator().next();
    gate.AnnotationSet matchedAnns= (gate.AnnotationSet) bindings.get("Happens2");      
    gate.FeatureMap newFeatures= Factory.newFeatureMap();
	
	String text = "", text2 = "";
	String textEvent = (String) entity.getFeatures().get("Entity1");
	AnnotationSet lookups = inputAS.getContained(matchedEntity.firstNode().getOffset(), matchedEntity.lastNode().getOffset()).get("Lookup");
	if(lookups.size() > 0)
	{
		ArrayList lookupsList = new ArrayList(lookups);
		Collections.sort(lookupsList, new OffsetComparator());
		Iterator lookupIter = lookupsList.iterator();
		Annotation temp;
		while(lookupIter.hasNext())
		{
			temp = (Annotation) lookupIter.next();
			if(((String)temp.getFeatures().get("majorType")).equals("timeHappened_key"))
			{
				try{
					text = doc.getContent().getContent(temp.getStartNode().getOffset(),temp.getEndNode().getOffset()).toString();
					textEvent = doc.getContent().getContent(entity.getStartNode().getOffset(),temp.getStartNode().getOffset()).toString();
				} catch(InvalidOffsetException e) {
				throw new GateRuntimeHappenedException(e);
				}
			}
			if(((String)temp.getFeatures().get("majorType")).equals("timeHappeneds")|((String)temp.getFeatures().get("majorType")).equals("date_key"))
			{
				try{
					text2 = doc.getContent().getContent(temp.getStartNode().getOffset(),temp.getEndNode().getOffset()).toString();
				} catch(InvalidOffsetException e) {
					throw new GateRuntimeHappenedException(e);
				}
			}
			
		}
	}
	
    newFeatures.put("Entity1",textEvent.trim());
	newFeatures.put("Entity2",text);
	newFeatures.put("TimeHappened",text2);
    newFeatures.put("rule","Happens2");
    annotations.add(matchedEntity.firstNode(),matchedEntity.lastNode(),"HappensRelation", newFeatures);
  }