Phase: roleResponsibleForRelation
Input: Token Lookup Person FirstPerson Character JobTitle
Options: control = appelt

Rule: RoleResponsibleForRelation15
(

({JobTitle}):entity1
({Token.string != ".", Token.string != ",", Token.string != "?", Token.string != "!"})*
({Token.category == VBD, Token.string != "be", Token.string != "been", Token.string != "is", Token.string != "was", Token.string != "has", Token.string != "are", Token.string != "were", Token.string != "have", Token.string != "had", Token.string != "is", Token.category != MD} | 
{Token.category == VBG, Token.string != "be", Token.string != "been", Token.string != "is", Token.string != "was", Token.string != "has", Token.string != "are", Token.string != "were", Token.string != "have", Token.string != "had", Token.string != "is", Token.category != MD} | 
{Token.category == VBN, Token.string != "be", Token.string != "been", Token.string != "is", Token.string != "was", Token.string != "has", Token.string != "are", Token.string != "were", Token.string != "have", Token.string != "had", Token.string != "is", Token.category != MD} | 
{Token.category == VBP, Token.string != "be", Token.string != "been", Token.string != "is", Token.string != "was", Token.string != "has", Token.string != "are", Token.string != "were", Token.string != "have", Token.string != "had", Token.string != "is", Token.category != MD} | 
{Token.category == VB, Token.string != "be", Token.string != "been", Token.string != "is", Token.string != "was", Token.string != "has", Token.string != "are", Token.string != "were", Token.string != "have", Token.string != "had", Token.string != "is", Token.category != MD} | 
{Token.category == VBZ, Token.string != "be", Token.string != "been", Token.string != "is", Token.string != "was", Token.string != "has", Token.string != "are", Token.string != "were", Token.string != "have", Token.string != "had", Token.string != "is", Token.category != MD}):entity2

):RoleResponsibleForRelation15
-->
:RoleResponsibleForRelation15
  {
    gate.AnnotationSet matchedEntities=(gate.AnnotationSet) bindings.get("entity1");
    Annotation entity1=matchedEntities.iterator().next();
    gate.AnnotationSet matchedEntities2=(gate.AnnotationSet) bindings.get("entity2");
    Annotation entity2=matchedEntities2.iterator().next();
    gate.AnnotationSet matchedAnns= (gate.AnnotationSet) bindings.get("RoleResponsibleForRelation15");      
    gate.FeatureMap newFeatures= Factory.newFeatureMap();
	String temp = "";
	try {
		temp = doc.getContent().getContent(matchedEntities.firstNode().getOffset(),matchedEntities.lastNode().getOffset()).toString();
	} catch(InvalidOffsetException e) {
		throw new GateRuntimeException(e);
	}
    newFeatures.put("Entity1",temp);
    newFeatures.put("Entity2",entity2.getFeatures().get("root"));
    newFeatures.put("rule","RoleResponsibleForRelation15");
    annotations.add(matchedAnns.firstNode(),matchedAnns.lastNode(),"RoleResponsibleForRelation", newFeatures);
  }
  
Rule: RoleResponsibleForRelation25
(

({Token.category == VBD, Token.string != "be", Token.string != "been", Token.string != "is", Token.string != "was", Token.string != "has", Token.string != "are", Token.string != "were", Token.string != "have", Token.string != "had", Token.string != "is", Token.category != MD} | 
{Token.category == VBG, Token.string != "be", Token.string != "been", Token.string != "is", Token.string != "was", Token.string != "has", Token.string != "are", Token.string != "were", Token.string != "have", Token.string != "had", Token.string != "is", Token.category != MD} | 
{Token.category == VBN, Token.string != "be", Token.string != "been", Token.string != "is", Token.string != "was", Token.string != "has", Token.string != "are", Token.string != "were", Token.string != "have", Token.string != "had", Token.string != "is", Token.category != MD} | 
{Token.category == VBP, Token.string != "be", Token.string != "been", Token.string != "is", Token.string != "was", Token.string != "has", Token.string != "are", Token.string != "were", Token.string != "have", Token.string != "had", Token.string != "is", Token.category != MD} | 
{Token.category == VB, Token.string != "be", Token.string != "been", Token.string != "is", Token.string != "was", Token.string != "has", Token.string != "are", Token.string != "were", Token.string != "have", Token.string != "had", Token.string != "is", Token.category != MD} | 
{Token.category == VBZ, Token.string != "be", Token.string != "been", Token.string != "is", Token.string != "was", Token.string != "has", Token.string != "are", Token.string != "were", Token.string != "have", Token.string != "had", Token.string != "is", Token.category != MD}):entity2
({Token.string != ".", Token.string != ",", Token.string != "?", Token.string != "!"})*
({Token.string == "by"})
({Token.string != ".", Token.string != ",", Token.string != "?", Token.string != "!"})*
({JobTitle}):entity1

):RoleResponsibleForRelation25
-->
:RoleResponsibleForRelation25
  {
    gate.AnnotationSet matchedEntities=(gate.AnnotationSet) bindings.get("entity1");
    Annotation entity1=matchedEntities.iterator().next();
    gate.AnnotationSet matchedEntities2=(gate.AnnotationSet) bindings.get("entity2");
    Annotation entity2=matchedEntities2.iterator().next();
    gate.AnnotationSet matchedAnns= (gate.AnnotationSet) bindings.get("RoleResponsibleForRelation25");      
    gate.FeatureMap newFeatures= Factory.newFeatureMap();
	String temp = "";
	try {
		temp = doc.getContent().getContent(matchedEntities.firstNode().getOffset(),matchedEntities.lastNode().getOffset()).toString();
	} catch(InvalidOffsetException e) {
		throw new GateRuntimeException(e);
	}
    newFeatures.put("Entity1",temp);
    newFeatures.put("Entity2",entity2.getFeatures().get("root"));
    newFeatures.put("rule","RoleResponsibleForRelation25");
    annotations.add(matchedAnns.firstNode(),matchedAnns.lastNode(),"RoleResponsibleForRelation", newFeatures);
  }